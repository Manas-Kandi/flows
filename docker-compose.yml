services:
  # Web client
  web:
    build:
      context: ./apps/web
      dockerfile: ../../infrastructure/docker/Dockerfile.web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8080
      - VITE_WS_URL=ws://localhost:8081
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    depends_on:
      - collaboration
      - geometry

  # Collaboration service
  collaboration:
    build:
      context: ./services/collaboration
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - redis
      - kafka
    volumes:
      - ./services/collaboration:/app
      - /app/node_modules

  # Geometry service
  geometry:
    build:
      context: ./services/geometry
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - GIN_MODE=release

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=flows
      - POSTGRES_USER=flows
      - POSTGRES_PASSWORD=flows_dev_password
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1

volumes:
  redis-data:
  postgres-data:
